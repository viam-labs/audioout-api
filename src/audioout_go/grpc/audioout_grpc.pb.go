// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: audioout.proto

package audioout_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AudiooutService_Play_FullMethodName = "/viamlabs.service.audioout.v1.AudiooutService/Play"
	AudiooutService_Stop_FullMethodName = "/viamlabs.service.audioout.v1.AudiooutService/Stop"
)

// AudiooutServiceClient is the client API for AudiooutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudiooutServiceClient interface {
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type audiooutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudiooutServiceClient(cc grpc.ClientConnInterface) AudiooutServiceClient {
	return &audiooutServiceClient{cc}
}

func (c *audiooutServiceClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, AudiooutService_Play_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audiooutServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, AudiooutService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudiooutServiceServer is the server API for AudiooutService service.
// All implementations must embed UnimplementedAudiooutServiceServer
// for forward compatibility
type AudiooutServiceServer interface {
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedAudiooutServiceServer()
}

// UnimplementedAudiooutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudiooutServiceServer struct {
}

func (UnimplementedAudiooutServiceServer) Play(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedAudiooutServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedAudiooutServiceServer) mustEmbedUnimplementedAudiooutServiceServer() {}

// UnsafeAudiooutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudiooutServiceServer will
// result in compilation errors.
type UnsafeAudiooutServiceServer interface {
	mustEmbedUnimplementedAudiooutServiceServer()
}

func RegisterAudiooutServiceServer(s grpc.ServiceRegistrar, srv AudiooutServiceServer) {
	s.RegisterService(&AudiooutService_ServiceDesc, srv)
}

func _AudiooutService_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudiooutServiceServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudiooutService_Play_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudiooutServiceServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudiooutService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudiooutServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudiooutService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudiooutServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudiooutService_ServiceDesc is the grpc.ServiceDesc for AudiooutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudiooutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viamlabs.service.audioout.v1.AudiooutService",
	HandlerType: (*AudiooutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _AudiooutService_Play_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _AudiooutService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audioout.proto",
}
